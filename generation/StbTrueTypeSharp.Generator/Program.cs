using Hebron;
using Hebron.Roslyn;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace StbSharp.StbTrueType.Generator
{
	static class Program
	{
		private static readonly Dictionary<string, string[]> _outputs = new Dictionary<string, string[]>
		{
			["Bitmap"] = new string[]
			{
				"stbtt__handle_clipped_edge",
				"stbtt__rasterize_sorted_edges",
				"stbtt__fill_active_edges_new",
				"stbtt__sort_edges_ins_sort",
				"stbtt__sort_edges_quicksort",
				"stbtt__sort_edges",
				"stbtt__bitmap",
				"stbtt__edge",
				"stbtt__active_edge",
			},
			["Buf"] = new string[]
			{
				"stbtt__buf",
				"stbtt__new_buf",

			},
			["CharString"] = new string[]
			{
				"stbtt__csctx"
			},
			["FontInfo"] = new string[]
			{
				"stbtt_fontinfo",
				"stbtt__close_shape",
				"stbtt__GetCoverageIndex",
				"stbtt__GetGlyphClass",
				"stbtt_kerningentry",
			},
			["RectPack"] = new string[]
			{
				"stbrp_context",
				"stbtt_pack_context",
				"stbtt_pack_range",
				"stbrp_node",
				"stbrp_rect",
			},
			["Heap"] = new string[]
			{
				"stbtt__hheap",
				"stbtt__hheap_chunk"
			}
		};

		private static bool OwnedByClass(this string value, string cls)
		{
			return value.Contains("(" + cls + " ") || value.Contains("(" + cls + "*");
		}

		private static void Write<T>(Dictionary<string, T> input, Dictionary<string, string> output) where T : SyntaxNode
		{
			var keys = (from string k in input.Keys orderby k select k).ToArray();
			foreach (var key in keys)
			{
				string outputKey = null;
				foreach (var pair2 in _outputs)
				{
					foreach (var prefix in pair2.Value)
					{
						if (key.StartsWith(prefix))
						{
							outputKey = pair2.Key;
							goto found;
						}
					}
				}
			found:

				string value;
				using (var sw = new StringWriter())
				{
					input[key].NormalizeWhitespace().WriteTo(sw);

					value = sw.ToString();
					value += Environment.NewLine;
				}

				if (outputKey == null)
				{
					if (value.OwnedByClass("stbtt__bitmap"))
					{
						outputKey = "Bitmap";
					}
					else if (value.OwnedByClass("stbtt__buf"))
					{
						outputKey = "Buf";
					}
					else if (value.OwnedByClass("stbtt__csctx"))
					{
						outputKey = "CharString";
					}
					else if (value.OwnedByClass("stbtt_fontinfo"))
					{
						outputKey = "FontInfo";
					}
					else if (value.OwnedByClass("stbrp_context") ||
						value.OwnedByClass("stbtt_pack_context"))
					{
						outputKey = "RectPack";
					}
					else if (value.OwnedByClass("stbtt__hheap"))
					{
						outputKey = "Heap";
					}
				}

				if (outputKey == null)
				{
					outputKey = "Common";
				}

				if (!output.ContainsKey(outputKey))
				{
					output[outputKey] = string.Empty;
				}

				output[outputKey] += value;
			}
		}

		private static string PostProcess(string data)
		{
			return data;
		}

		static void Process()
		{
			var parameters = new RoslynConversionParameters
			{
				InputPath = @"stb_truetype.h",
				Defines = new[]
				{
					"STB_TRUETYPE_IMPLEMENTATION",
				},
				Classes = new[]
				{
					"stbtt_pack_context",
					"stbtt_fontinfo",
				},
				SkipStructs = new string[]
				{
					"stbtt_fontinfo",
				},
				SkipGlobalVariables = new string[]
				{
				},
				SkipFunctions = new string[]
				{
					"stbtt__find_table",
				},
			};

			var dump = TextCodeConverter.Convert(parameters.InputPath, parameters.Defines);
			File.WriteAllText(@"..\..\..\..\..\..\src\StbTrueType.txt", dump);

			var result = RoslynCodeConverter.Convert(parameters);

			// Post processing
			Logger.Info("Post processing...");

			var outputFiles = new Dictionary<string, string>();
			Write(result.NamedEnums, outputFiles);
			Write(result.UnnamedEnumValues, outputFiles);
			Write(result.GlobalVariables, outputFiles);
			Write(result.Delegates, outputFiles);
			Write(result.Structs, outputFiles);
			Write(result.Functions, outputFiles);

			foreach (var pair in outputFiles)
			{
				var data = PostProcess(pair.Value);

				var sb = new StringBuilder();
				sb.AppendLine(string.Format("// Generated by Sichem at {0}", DateTime.Now));
				sb.AppendLine();

				sb.AppendLine("using System;");
				sb.AppendLine("using System.Runtime.InteropServices;");
				sb.AppendLine("using Hebron.Runtime;");

				sb.AppendLine();

				sb.Append("namespace StbTrueTypeSharp\n{\n\t");
				sb.AppendLine("unsafe partial class StbTrueType\n\t{");

				data = sb.ToString() + data;
				data += "}\n}";

				var fileName = @"..\..\..\..\..\..\src\StbTrueType.Generated." + pair.Key + ".cs";
				Logger.Info("Writing {0}", fileName);
				File.WriteAllText(fileName, data);
			}
		}

		static void Main(string[] args)
		{
			try
			{
				Process();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine(ex.StackTrace);
			}

			Console.WriteLine("Finished. Press any key to quit.");
			Console.ReadKey();
		}
	}
}